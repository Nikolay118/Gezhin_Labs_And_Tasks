import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;


class Main{
	public static void main(String[] args){

		Scanner scan = new Scanner(System.in);
		System.out.println(sameLetterPattern("FFFF", "ABCD"));
		System.out.println();
		System.out.println(digitsCount(544456));
		String[] words = new String[] {"dote", "dotes", "toes", "set", "dot", "dots", "sted"};
		System.out.println(totalPoints(words, "tossed"));
		int[] mas = new int[] {3, 5, 7, 10, 15};
		System.out.println(longestRun(mas));
		String[] mas_2 = new String[] {"53%", "79%"};
		System.out.println(takeDownAverage(mas_2));
		System.out.println(rearrange("4of Fo1r pe6ople g3ood th5e the2"));
		System.out.println(maxPossible(8732, 1000));
		System.out.println(timeDifference("London", "July 31, 1983 23:01", "Rome"));
		
	}
	
	static boolean sameLetterPattern(String str1, String str2)
	{
		HashMap<Character, Integer> map1 = new HashMap<>();
		HashMap<Character, Integer> map2 = new HashMap<>();
		int len = str1.length();
		int[] array1 = new int[len];
		int[] array2 = new int[len];
		char[] chars1 = str1.toCharArray();
		char[] chars2 = str2.toCharArray();
		
		int counter = 1;
		for (int i = 0; i < len; i++)
			if (!(map1.containsKey(chars1[i])))
			{
				map1.put(chars1[i], counter);
				array1[i] = map1.get(chars1[i]);
				counter += 1;
			}
			else
			{
				array1[i] = map1.get(chars1[i]);
			}
		counter = 1;
		for (int i = 0; i < len; i++)
			if (!(map2.containsKey(chars2[i])))
			{
				map2.put(chars2[i], counter);
				array2[i] = map2.get(chars2[i]);
				counter += 1;
			}
			else
			{
				array2[i] = map2.get(chars2[i]);
			}
		return Arrays.equals(array1, array2);
	}
	
	static int  digitsCount(int num)
	{
		int counter = 1;
		num = num / 10;
		if (num == 0)
		{
			return counter;
		}
		counter += digitsCount(num);
		return counter;
	}
	
	static int totalPoints(String[] words, String finalWord)
	{
		int score = 0;
		char[] charsFinalWord = finalWord.toCharArray();
		char[] charsWord;
		boolean Flag;
		HashMap<Character, Integer> mapFinalWord = new HashMap<>();
		HashMap<Character, Integer> mapWord = new HashMap<>();
		
		for (int i = 0; i < 6; i++)
		{
			if (mapFinalWord.containsKey(charsFinalWord[i]))
				mapFinalWord.put(charsFinalWord[i], mapFinalWord.get(charsFinalWord[i]) + 1);
			else
				mapFinalWord.put(charsFinalWord[i], 1);
		}
		
		for (int i = 0; i < words.length; i++)
		{
		    mapWord.clear();
		    charsWord = words[i].toCharArray();
		    Flag = true;
		    for (int j = 0; j < charsWord.length; j++)
			{
				if (mapWord.containsKey(charsWord[j]))
					mapWord.put(charsWord[j], mapWord.get(charsWord[j]) + 1);
				else
					mapWord.put(charsWord[j], 1);
				
				if (mapFinalWord.containsKey(charsWord[j]) == false)
					Flag = false;
				else
				{
					if (mapWord.get(charsWord[j]) > mapFinalWord.get(charsWord[j]))
						Flag = false;
				}
				}
			
			int len = words[i].length();
			if (Flag == true)
			{
				if (len == 3)
					score += 1;
				if (len == 4)
					score += 2;
				if (len == 5)
					score += 3;
				if (len == 6)
					score += 54;
			}
		}
		return score;
	}
	
	static int longestRun(int[] mas)
	{
		int maxRun = 1;
		int anyRun = 1;
		for (int i = 0; i < mas.length - 1; i++)
		{
			if ((mas[i + 1] == mas[i] + 1) || (mas[i + 1] == mas[i] - 1))
				anyRun += 1;
			else
				anyRun = 1;
			if (anyRun > maxRun)
				maxRun = anyRun;
		}
		return maxRun;
	}
	
	static String takeDownAverage(String[] args)
	{
		int sum = 0;
		int kol = args.length;
		String a = new String();
		for (int i = 0; i < args.length; i++)
		{
			
			a = args[i].replaceAll("%", "");
			sum += Integer.parseInt(a);
		}
		int ans = Math.round(((sum - 5 * kol) * (kol + 1) - sum * kol) / kol);
		return Integer.toString(ans);
	}
	
	static String rearrange(String str)
	{
		HashMap<Integer, String> numberAndNewWord = new HashMap<>();
		String[] words = str.split(" ");
		int number;
		String rez = new String();
		String word2;
		for (int i = 0; i < words.length; i++)
		{
			char[] word = words[i].toCharArray();
			for (int j = 0; j < word.length; j++)
			{
				if ("123456789".contains(String.valueOf(word[j])))
				{
					number = Integer.valueOf(String.valueOf(word[j]));
					numberAndNewWord.put(number, words[i]);
					break;
				}
			}
		}
		for (int i = 1; i < words.length + 1; i++)
		{
			if (i == words.length)
				rez += numberAndNewWord.get(i);
			else
				rez += numberAndNewWord.get(i) + " ";
		}
		rez = rez.replaceAll("1", "");
		rez = rez.replaceAll("2", "");
		rez = rez.replaceAll("3", "");
		rez = rez.replaceAll("4", "");
		rez = rez.replaceAll("5", "");
		rez = rez.replaceAll("6", "");
		rez = rez.replaceAll("7", "");
		rez = rez.replaceAll("8", "");
		rez = rez.replaceAll("9", "");
		return rez;
	}

	static int maxPossible(int a, int b)
		{
		int rez = 0;
		int counter = 0;
		int[] a_raz = new int[Integer.toString(a).length()];
		while (a != 0)
		{
			a_raz[counter] = a % 10;
			a = a / 10;
			counter += 1;
		}		
		for(int i = 0; i < a_raz.length / 2; i++)
		{
		    int temp = a_raz[i];
		    a_raz[i] = a_raz[a_raz.length - i - 1];
		    a_raz[a_raz.length - i - 1] = temp;
		}		
		counter = 0;
		int[] b_raz = new int[Integer.toString(b).length()];
		while (b > 0)
		{
			b_raz[counter] = b % 10;
			b = b / 10;
			counter += 1;
		}		
		Arrays.sort(b_raz);		
		for(int i = 0; i < b_raz.length / 2; i++)
		{
		    int temp = b_raz[i];
		    b_raz[i] = b_raz[b_raz.length - i - 1];
		    b_raz[b_raz.length - i - 1] = temp;
		}		
		counter = 0;
		for (int i = 0; i < a_raz.length; i++)
		{
			if (counter == b_raz.length)
				break;
			if (a_raz[i] < b_raz[counter])
			{
				a_raz[i] = b_raz[counter];
				counter += 1;
			}
		}		
		counter = a_raz.length - 1;		
		for (int i = 0; i < a_raz.length; i++)
		{
			rez += a_raz[i] * Math.pow(10, counter);
			counter -= 1;
		}
		return rez;
	}
	
	static String timeDifference(String cityA, String time, String cityB)
	{
		time = time.replaceAll(",", "");
		ArrayList<String> months = new ArrayList<String>();
		months.add("January");
		months.add("February");
		months.add("March");
		months.add("April");
		months.add("May");
		months.add("June");
		months.add("July");
		months.add("August");
		months.add("September");
		months.add("October");
		months.add("November");
		months.add("December");
		
		String rez = new String();
		HashMap<String, int[]> cityAndTimeDif = new HashMap<>();
		cityAndTimeDif.put("Los Angeles", new int[] {-8, 0});
		cityAndTimeDif.put("New York", new int[] {-5, 0});
		cityAndTimeDif.put("Caracas", new int[] {-4, -30});
		cityAndTimeDif.put("Buenos Aires", new int[] {-3, 0});
		cityAndTimeDif.put("London", new int[] {0, 0});
		cityAndTimeDif.put("Rome", new int[] {1, 0});
		cityAndTimeDif.put("Moscow", new int[] {3, 0});
		cityAndTimeDif.put("Tehran", new int[] {3, 30});
		cityAndTimeDif.put("New Delhi", new int[] {5, 30});
		cityAndTimeDif.put("Beijing", new int[] {8, 0});
		cityAndTimeDif.put("Canberra", new int[] {10, 0});
		
		HashMap<String, Integer> monthAndDays = new HashMap<>();
		monthAndDays.put("January", 31);
		monthAndDays.put("February", 28);
		monthAndDays.put("March", 31);
		monthAndDays.put("April", 30);
		monthAndDays.put("May", 31);
		monthAndDays.put("June", 30);
		monthAndDays.put("July", 31);
		monthAndDays.put("August", 31);
		monthAndDays.put("September", 30);
		monthAndDays.put("October", 31);
		monthAndDays.put("November", 30);
		monthAndDays.put("December", 31);
		
		String month = time.split(" ")[0];
		int date = Integer.valueOf(time.split(" ")[1]);
		int year = Integer.valueOf(time.split(" ")[2]);
		int hour = Integer.valueOf((time.split(" ")[3]).split(":")[0]);
		int minute = Integer.valueOf((time.split(" ")[3]).split(":")[1]);
		
		int newHour = hour + cityAndTimeDif.get(cityB)[0] - cityAndTimeDif.get(cityA)[0];
		int newMinute = (minute + cityAndTimeDif.get(cityB)[1] - cityAndTimeDif.get(cityA)[1]) % 60;
		newHour += newMinute / 60;
		
		System.out.println();
		System.out.println(newHour % 24);

		
		int newDate = date;
		String newMonth = new String();
		newMonth = month;
		int newYear = year;
		
		if (newHour >= 24)
		{
			System.out.println("new day");
			newDate = date + newHour / 24;
			newHour = newHour % 24;
		}
		if (newDate >= monthAndDays.get(month))
		{
			System.out.println("new month");
			newMonth = months.get((month.indexOf(month) + 1) % 12);
			newDate = newDate % monthAndDays.get(month);
		}
		
		String hourString = new String();
		if (hour < 10)
			hourString = "0" + Integer.toString(hour);
		else
			hourString = Integer.toString(hour);
		String minuteString = new String();
		if (minute < 10)
			minuteString = "0" + Integer.toString(minute);
		else
			minuteString = Integer.toString(minute);
		return String.format("%d-%s-%d %s:%s", newYear, months.indexOf(newMonth) + 1, newDate, hourString, minuteString);
	}
}