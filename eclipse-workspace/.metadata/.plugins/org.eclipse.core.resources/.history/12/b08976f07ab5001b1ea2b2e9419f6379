import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;


class Main{
	public static void main(String[] args){

		Scanner scan = new Scanner(System.in);
		System.out.println(sameLetterPattern("FFFF", "ABCD"));
		System.out.println(digitsCount(544456));
		String[] words = new String[] {"dote", "dotes", "toes", "set", "dot", "dots", "sted"};
		System.out.println(totalPoints(words, "tossed"));
		int[] mas = new int[] {3, 5, 7, 10, 15};
		System.out.println(longestRun(mas));
		String[] mas_2 = new String[] {"53%", "79%"};
		System.out.println(takeDownAverage(mas_2));
		
	}

	static boolean sameLetterPattern(String str1, String str2)
	{
		HashMap<Character, Integer> map1 = new HashMap<>();
		HashMap<Character, Integer> map2 = new HashMap<>();
		int len = str1.length();
		int[] array1 = new int[len];
		int[] array2 = new int[len];
		char[] chars1 = str1.toCharArray();
		char[] chars2 = str2.toCharArray();
		
		int counter = 1;
		for (int i = 0; i < len; i++)
			if (!(map1.containsKey(chars1[i])))
			{
				map1.put(chars1[i], counter);
				array1[i] = map1.get(chars1[i]);
				counter += 1;
			}
			else
			{
				array1[i] = map1.get(chars1[i]);
			}
		counter = 1;
		for (int i = 0; i < len; i++)
			if (!(map2.containsKey(chars2[i])))
			{
				map2.put(chars2[i], counter);
				array2[i] = map2.get(chars2[i]);
				counter += 1;
			}
			else
			{
				array2[i] = map2.get(chars2[i]);
			}
		return Arrays.equals(array1, array2);
	}
	
	static int  digitsCount(int num)
	{
		int counter = 1;
		num = num / 10;
		if (num == 0)
		{
			return counter;
		}
		counter += digitsCount(num);
		return counter;
	}
	
	static int totalPoints(String[] words, String finalWord)
	{
		int score = 0;
		char[] charsFinalWord = finalWord.toCharArray();
		char[] charsWord;
		boolean Flag;
		HashMap<Character, Integer> mapFinalWord = new HashMap<>();
		HashMap<Character, Integer> mapWord = new HashMap<>();
		
		for (int i = 0; i < 6; i++)
		{
			if (mapFinalWord.containsKey(charsFinalWord[i]))
				mapFinalWord.put(charsFinalWord[i], mapFinalWord.get(charsFinalWord[i]) + 1);
			else
				mapFinalWord.put(charsFinalWord[i], 1);
		}
		
		for (int i = 0; i < words.length; i++)
		{
		    mapWord.clear();
		    charsWord = words[i].toCharArray();
		    Flag = true;
		    for (int j = 0; j < charsWord.length; j++)
			{
				if (mapWord.containsKey(charsWord[j]))
					mapWord.put(charsWord[j], mapWord.get(charsWord[j]) + 1);
				else
					mapWord.put(charsWord[j], 1);
				
				if (mapFinalWord.containsKey(charsWord[j]) == false)
					Flag = false;
				else
				{
					if (mapWord.get(charsWord[j]) > mapFinalWord.get(charsWord[j]))
						Flag = false;
				}

				}
			
			int len = words[i].length();
			if (Flag == true)
			{
				if (len == 3)
					score += 1;
				if (len == 4)
					score += 2;
				if (len == 5)
					score += 3;
				if (len == 6)
					score += 54;
			}
		}
		return score;
	}
	
	static int longestRun(int[] mas)
	{
		int maxRun = 1;
		int anyRun = 1;
		for (int i = 0; i < mas.length - 1; i++)
		{
			if ((mas[i + 1] == mas[i] + 1) || (mas[i + 1] == mas[i] - 1))
				anyRun += 1;
			else
				anyRun = 1;
			if (anyRun > maxRun)
				maxRun = anyRun;
		}
		return maxRun;
	}
	
	static String takeDownAverage(String[] args)
	{
		int sum = 0;
		int kol = args.length;
		String a = new String();
		for (int i = 0; i < args.length; i++)
		{
			
			a = args[i].replaceAll("%", "");
			sum += Integer.parseInt(a);
		}
		int ans = Math.round(((sum - 5 * kol) * (kol + 1) - sum * kol) / kol);
		return Integer.toString(ans);
	}
}